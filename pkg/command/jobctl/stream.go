/*
Copyright 2021 Andy Dalton
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package jobctl

import (
	"errors"
	"os"

	"github.com/adalton/teleport-exercise/pkg/client/jobmanager"

	"github.com/spf13/cobra"
)

var (
	argStream string
)

var streamCommand = &cobra.Command{
	Use:     "stream",
	Short:   "Stream job output",
	Long:    "Stream the output (either stdout or stderr) generated by a job",
	Example: "jobctl stream 8de11b74-5cd9-4769-b40d-53de13faf77f",
	RunE:    stream,
}

func init() {
	streamCommand.PersistentFlags().StringVarP(
		&argStream,
		"stream",
		"s",
		"stdout",
		`The output to stream ("stdout" or "stderr")`)

	streamCommand.MarkPersistentFlagRequired("jobid")

	rootCmd.AddCommand(streamCommand)
}

func stream(cmd *cobra.Command, args []string) error {
	if argStream != "stdout" && argStream != "stderr" {
		return errors.New("valid option for stream are 'stdout' and 'stderr'")
	}

	if len(args) != 1 {
		return errors.New("must include exactly one job ID to stream")
	}

	c, err := jobmanager.NewClient(argUserID, argServerHostPort)
	if err != nil {
		return err
	}
	defer c.Close()

	if argStream == "stdout" {
		return c.StreamStdout(cmd.Context(), args[0], os.Stdout)
	}

	return c.StreamStderr(cmd.Context(), args[0], os.Stderr)
}
