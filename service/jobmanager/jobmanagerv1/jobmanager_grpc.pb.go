// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobmanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobManagerClient is the client API for JobManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagerClient interface {
	// Starts a new job.  The given JobCreationRequest captures the
	// details needed by the service to create the job.  Returns a
	// Job, that will enable further operations on the created job.
	Start(ctx context.Context, in *JobCreationRequest, opts ...grpc.CallOption) (*Job, error)
	// Terminates a (potentially running) Job by sending it the
	// SIGKILL signal.  If the specified job is no longer running,
	// this function has no effect.
	Stop(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*NilMessage, error)
	// Queries the state of the given Job.
	Query(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobStatus, error)
	// List all jobs and their status.  Possible extensions to this
	// might enable clients to specify a filter to reduce the
	// resulting set.  Depending on the desired scale of the system,
	/// paging might also be desired.
	List(ctx context.Context, in *NilMessage, opts ...grpc.CallOption) (*JobStatusList, error)
	// Streams the output of the running job to the client.
	// The stream begins with the initial output generated by the Job
	// and ends when the Job is finished.
	StreamOutput(ctx context.Context, in *StreamOutputRequest, opts ...grpc.CallOption) (JobManager_StreamOutputClient, error)
}

type jobManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagerClient(cc grpc.ClientConnInterface) JobManagerClient {
	return &jobManagerClient{cc}
}

func (c *jobManagerClient) Start(ctx context.Context, in *JobCreationRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/jobmanager.v1.JobManager/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Stop(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*NilMessage, error) {
	out := new(NilMessage)
	err := c.cc.Invoke(ctx, "/jobmanager.v1.JobManager/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Query(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/jobmanager.v1.JobManager/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) List(ctx context.Context, in *NilMessage, opts ...grpc.CallOption) (*JobStatusList, error) {
	out := new(JobStatusList)
	err := c.cc.Invoke(ctx, "/jobmanager.v1.JobManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) StreamOutput(ctx context.Context, in *StreamOutputRequest, opts ...grpc.CallOption) (JobManager_StreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobManager_ServiceDesc.Streams[0], "/jobmanager.v1.JobManager/StreamOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagerStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManager_StreamOutputClient interface {
	Recv() (*JobOutput, error)
	grpc.ClientStream
}

type jobManagerStreamOutputClient struct {
	grpc.ClientStream
}

func (x *jobManagerStreamOutputClient) Recv() (*JobOutput, error) {
	m := new(JobOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobManagerServer is the server API for JobManager service.
// All implementations must embed UnimplementedJobManagerServer
// for forward compatibility
type JobManagerServer interface {
	// Starts a new job.  The given JobCreationRequest captures the
	// details needed by the service to create the job.  Returns a
	// Job, that will enable further operations on the created job.
	Start(context.Context, *JobCreationRequest) (*Job, error)
	// Terminates a (potentially running) Job by sending it the
	// SIGKILL signal.  If the specified job is no longer running,
	// this function has no effect.
	Stop(context.Context, *JobID) (*NilMessage, error)
	// Queries the state of the given Job.
	Query(context.Context, *JobID) (*JobStatus, error)
	// List all jobs and their status.  Possible extensions to this
	// might enable clients to specify a filter to reduce the
	// resulting set.  Depending on the desired scale of the system,
	/// paging might also be desired.
	List(context.Context, *NilMessage) (*JobStatusList, error)
	// Streams the output of the running job to the client.
	// The stream begins with the initial output generated by the Job
	// and ends when the Job is finished.
	StreamOutput(*StreamOutputRequest, JobManager_StreamOutputServer) error
	mustEmbedUnimplementedJobManagerServer()
}

// UnimplementedJobManagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagerServer struct {
}

func (UnimplementedJobManagerServer) Start(context.Context, *JobCreationRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobManagerServer) Stop(context.Context, *JobID) (*NilMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobManagerServer) Query(context.Context, *JobID) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedJobManagerServer) List(context.Context, *NilMessage) (*JobStatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobManagerServer) StreamOutput(*StreamOutputRequest, JobManager_StreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOutput not implemented")
}
func (UnimplementedJobManagerServer) mustEmbedUnimplementedJobManagerServer() {}

// UnsafeJobManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagerServer will
// result in compilation errors.
type UnsafeJobManagerServer interface {
	mustEmbedUnimplementedJobManagerServer()
}

func RegisterJobManagerServer(s grpc.ServiceRegistrar, srv JobManagerServer) {
	s.RegisterService(&JobManager_ServiceDesc, srv)
}

func _JobManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobmanager.v1.JobManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Start(ctx, req.(*JobCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobmanager.v1.JobManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Stop(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobmanager.v1.JobManager/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Query(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NilMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobmanager.v1.JobManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).List(ctx, req.(*NilMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_StreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagerServer).StreamOutput(m, &jobManagerStreamOutputServer{stream})
}

type JobManager_StreamOutputServer interface {
	Send(*JobOutput) error
	grpc.ServerStream
}

type jobManagerStreamOutputServer struct {
	grpc.ServerStream
}

func (x *jobManagerStreamOutputServer) Send(m *JobOutput) error {
	return x.ServerStream.SendMsg(m)
}

// JobManager_ServiceDesc is the grpc.ServiceDesc for JobManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobmanager.v1.JobManager",
	HandlerType: (*JobManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobManager_Stop_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _JobManager_Query_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JobManager_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOutput",
			Handler:       _JobManager_StreamOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobmanager.proto",
}
